# github.com/docker/awesome-compose
networks:
  button-network:
    driver: bridge
services:
  grafana:
    image: grafana/grafana:${GRAFANA_TAG:-11.5.2}
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
      - elasticsearch
      - loki
      - tempo
    ports:
      - 3000:3000
    networks:
      - button-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-grafana}
      - GF_DISCORD_WEBHOOK_URL=${GF_DISCORD_WEBHOOK_URL:-https://discord.com/api/webhooks/your-channel-id/token}
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning/alerting:/etc/grafana/provisioning/alerting
  prometheus:
    image: prom/prometheus:${PROMETHEUS_TAG:-v3.2.0}
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    networks:
      - button-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prom_data:/prometheus
  elasticsearch:
    image: elasticsearch:${ELASTICSEARCH_TAG:-8.8.0}
    restart: unless-stopped
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - button-network
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
  otel:
    image: otel/opentelemetry-collector:${OTEL_TAG:-0.120.0}
    container_name: otel
    restart: unless-stopped
    environment:
      - OTEL_LOG_LEVEL=debug
    command: --config=/etc/otel-collector-config.yml
    volumes:
      - ./otel/otel-collector-config.yml:/etc/otel-collector-config.yml
    networks:
      - button-network
    ports:
      # - "1888:1888"
      # - "8888:8888"
      # - "8889:8889"
      - "13133:13133"
      - "4317:4317"
      # - "4318:4318"
      # - "55679:55679"
    extra_hosts:
      - host.docker.internal:host-gateway
  loki:
    image: grafana/loki:${LOKI_TAG:-3.4}
    container_name: loki
    restart: unless-stopped
    # ports:
    #   - "3100:3100"
    #   - "9095:9095"
    environment:
      - ALLOW_STRUCTURED_METADATA=true
    networks:
      - button-network
  tempo:
    image: grafana/tempo:${TEMPO_TAG:-main-6951cf6}
    container_name: tempo
    restart: unless-stopped
    volumes:
      - ./tempo/tempo-config.yaml:/etc/tempo-config.yaml
      #- ./tempo-data:/tmp/tempo
    command: [ "-config.file=/etc/tempo-config.yaml" ]
    # ports:
    #   - "3200:3200"  # grafana API
    #   - "4319:4317"  # OTLP gRPC
    #   - "4320:4318"  # OTLP HTTP
    #   - "9411:9411"  # Zipkin API
    networks:
      - button-network
  blackbox-exporter:
    image: prom/blackbox-exporter
    container_name: blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    networks:
      - button-network
    volumes:
      - ./prometheus/blackbox.yml:/etc/blackbox_exporter/config.yml
  redis:
    image: redis:7
    container_name: redis
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - button-network
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - button-network
  business-metrics:
    container_name: business-metrics
    build:
      context: ../src
      dockerfile: Dockerfile.BusinessMetricsService
    image: business-metrics-service:local
    environment:
      REDIS__HOST: "redis"
      REDIS__PORT: "6379"
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - button-network
  postgres:
    image: postgres:16
    container_name: buttonshop-persistence
    restart: unless-stopped
    environment:
      POSTGRES_USER: marten
      POSTGRES_PASSWORD: marten
      POSTGRES_DB: buttonshop
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - button-network

volumes:
  prom_data:
  elastic_data:
  redis-data:
  pgdata:
